name: Release Edge Images

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Cache Protos
        id: proto-cache
        uses: actions/cache@v3
        with:
          path: libs/shared/data-access/src/lib/proto/generated
          key: protobuf-${{ hashFiles('libs/shared/data-access/src/lib/proto/ArmoniK.Api/Protos/V1/*.proto') }}

      - name: Use Node.js
        if: steps.node-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'yarn'

      - name: Install Dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn --immutable

      - name: Install Protoc
        if: steps.proto-cache.outputs.cache-hit != 'true'
        uses: arduino/setup-protoc@v1

      - name: Build protos
        if: steps.proto-cache.outputs.cache-hit != 'true'
        run: yarn proto:generate

  build-push-docker-images:
    name: Build and Push Docker Images
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - name: armonik_admin_app
            file: app.Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'yarn'

      - name: Restore Protos
        id: proto-cache
        uses: actions/cache@v3
        with:
          path: libs/shared/data-access/src/lib/proto/generated
          key: protobuf-${{ hashFiles('libs/shared/data-access/src/lib/proto/ArmoniK.Api/Protos/V1/*.proto') }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            dockerhubaneo/${{ matrix.dockerfile.name }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=pr
            type=ref,event=push

      - name: Login to DockerHub
        if: github.event_name != 'push'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.dockerfile.file }}
          cache-from: type=registry,ref=dockerhubaneo/${{ matrix.dockerfile.name }}:buildcache
          cache-to: type=registry,ref=dockerhubaneo/${{ matrix.dockerfile.name }}:buildcache,mode=max
