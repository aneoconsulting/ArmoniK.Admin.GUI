name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn

  validate-code:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Restore Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: main

      - name: Check code style
        run: npx nx format:check
      - name: Check code quality
        run: npx nx affected --target=lint --parallel=3

  unit-tests:
    needs: validate-code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Restore Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: main

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Build proto
        run: yarn proto:generate

      - name: Run Unit Tests
        run: npx nx affected --target=test --parallel=3 --code-coverage

      - name: Coverage Report (App)
        # Can't publish on push on main
        if: ${{ github.event_name == 'pull_request' }}
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: App - Coverage
          delete-old-comments: true
          lcov-file: ./coverage/apps/app/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Coverage for Api
        # Can't publish on push on main
        if: ${{ github.event_name == 'pull_request' }}
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Api - Coverage
          delete-old-comments: true
          lcov-file: ./coverage/apps/api/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact (App)
        # Store report created on main
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-apps-app
          path: ./coverage/apps/app/

      - name: Upload Artifact (Api)
        # Store report created on main
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-apps-api
          path: ./coverage/apps/api/

  e2e-tests:
    needs: validate-code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: 5.0
          mongodb-db: test

      - name: Update fixture
        run: bash ${GITHUB_WORKSPACE}/scripts/e2e-update-mongo-fixtures.sh

      - name: Populate MongoDB
        run: bash ${GITHUB_WORKSPACE}/scripts/e2e-populate-mongo.sh

      - name: Create proxy.conf.json
        run: bash ${GITHUB_WORKSPACE}/scripts/e2e-create-proxy-conf.sh

      - name: Restore Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Build proto
        run: yarn proto:generate

      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          install-command: npx cypress install
          start: 'npx nx serve api'
          command: npx nx e2e app-e2e

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: ./dist/cypress/apps/app-e2e/screenshots

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: ./dist/cypress/apps/app-e2e/videos

  build:
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Restore Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: main

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Build proto
        run: yarn proto:generate

      - name: Build all
        run: npx nx affected --target=build --parallel=3

  build-push-docker-images:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - name: armonik_admin_app
            file: app.Dockerfile
          - name: armonik_admin_api
            file: api.Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Restore Node Modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Build proto
        run: yarn proto:generate

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            dockerhubaneo/${{ matrix.dockerfile.name }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=pr

      - name: Login to DockerHub
        if: github.event_name != 'push'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.dockerfile.file }}
